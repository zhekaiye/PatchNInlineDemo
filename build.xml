<?xml version="1.0" encoding="UTF-8"?>
<project name="PatchInlineDemo" default="release">

	<!-- ANT环境变量 -->  
    <property environment="env" />  
    <!-- 应用名称 -->  
    <property name="appName" value="${ant.project.name}"/>
     
    <property name="sdk-folder" value="${env.ANDROID_HOME}" />
    
    <!-- SDK中tools目录     -->
    <property name="sdk-tools" value="${sdk-folder}/build-tools/19.1.0" />
    
    <property name="jdk-tools" value="${env.JAVA_HOME}/bin" />
  
    <!-- 使用到的命令(当前系统为windows,如果系统为linux,可将.bat文件替换成相对应的命令) -->  
    <property name="aapt" value="${sdk-tools}/aapt" />  
    <property name="aidl" value="${sdk-tools}/aidl" />  
    <property name="dx" value="${sdk-tools}/dx.bat" />  
    <property name="apkbuilder" value="${sdk-tools}/apkbuilder.bat" />  
    <property name="jarsigner" value="${jdk-tools}/jarsigner" /> 
    <property name="jar" value="${jdk-tools}/jar" /> 
      
    <property name="android-jar" value="${sdk-folder}/platforms/android-19/android.jar" />  
     
    <!-- 编译aidl文件所需的预处理框架文件framework.aidl -->  
    <property name="framework-aidl" value="${sdk-folder}/platforms/android-19/framework.aidl" />  
  
    <!-- 生成R文件的相对目录 -->  
    <property name="outdir-gen" value="gen" />  
	
    <!-- 编译后的文件放置目录 -->  
    <property name="outdir-bin" value="bin" />
    
    <!-- 清单文件 -->  
    <property name="manifest-xml" value="AndroidManifest.xml" />  

    <!-- 目录及路径定义  -->  
    <property name="resource-dir" value="res" />  
    <property name="asset-dir" value="assets" />   
    <property name="srcdir" value="src" />  
    <property name="srcdir-ospath" value="${basedir}/${srcdir}" />   
    <property name="external-lib" value="libs" />  
    <property name="external-lib-ospath" value="${basedir}/${external-lib}" />  
  
    <!-- 生成class目录 -->  
    <property name="outdir-classes" value="${outdir-bin}/mainclass" />  
    <property name="outdir-classes-ospath" value="${basedir}/${outdir-classes}" />
    
    <property name="patch-classes" value="${outdir-bin}/patchclass" />  
    <property name="patch-classes-ospath" value="${basedir}/${patch-classes}" />
    
    <!-- classes.dex相关变量 -->  
    <property name="maindex-file" value="classes.dex" />  
    <property name="maindex-path" value="${outdir-bin}/${maindex-file}" />  
    <property name="maindex-ospath" value="${basedir}/${maindex-path}" />
    
    <property name="patchdex-file" value="classes.dex" />
    <property name="patchjar-file" value="patch.jar" />  
    <property name="patchdex-path" value="${outdir-bin}/patch" />
    <property name="patchdex-ospath" value="${basedir}/${patchdex-path}" />
  
    <!-- 经过aapt生成的资源包文件 -->  
    <property name="resources-package" value="${outdir-bin}/resources.ap_" />  
    <property name="resources-package-ospath" value="${basedir}/${resources-package}" />  
      
    <!-- 未认证apk包 -->  
    <property name="out-unsigned-package" value="${outdir-bin}/${appName}-unsigned.apk" />  
    <property name="out-unsigned-package-ospath" value="${basedir}/${out-unsigned-package}" />  
      
    <!-- 证书文件 -->  
    <property name="keystore-file" value="${basedir}/hotpatch.keystore" />  
      
    <!-- 已认证apk包 -->  
    <property name="out-signed-package" value="${outdir-bin}/${appName}-signed.apk" />  
    <property name="out-signed-package-ospath" value="${basedir}/${out-signed-package}" /> 
    
    <target name="clean">  
        <echo>clean...</echo>  
		<delete dir="${outdir-gen}" />
		<delete dir="${outdir-classes-ospath}"/>
		<mkdir dir="${outdir-gen}" /> 
        <mkdir dir="${outdir-classes-ospath}" />
        <delete dir="${patch-classes-ospath}"/>
		<mkdir dir="${patch-classes-ospath}" /> 
		<delete dir="${patchdex-ospath}"/>
		<mkdir dir="${patchdex-ospath}" />
    </target> 
    
	<!-- 初始化工作 -->  
    <target name="init">  
        <echo>Initializing all output directories...</echo>  
		<delete dir="${outdir-gen}" />
		<delete dir="${outdir-classes-ospath}"/>
		<mkdir dir="${outdir-gen}" /> 
        <mkdir dir="${outdir-classes-ospath}" />
    </target> 
	
	<!-- 根据工程中的资源文件生成R.java文件  -->  
    <target name="gen-R" depends="init">  
        <echo>Generating R.java from the resources...</echo>
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-m" />  
            <arg value="-J" />  
            <arg value="${outdir-gen}" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-M" />  
            <arg value="${manifest-xml}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
        </exec>  
    </target>

	<target name="aidl" depends="gen-R">  
        <echo>Compiling .aidl into java files...</echo>  
        <apply executable="${aidl}" failonerror="true">  
            <!-- 指定预处理文件 -->  
            <arg value="-p${framework-aidl}"/>  
            <!-- aidl声明的目录 -->  
            <arg value="-I${srcdir}"/>  
            <!-- 目标文件目录 -->  
            <arg value="-o${outdir-gen}"/>  
            <!-- 指定哪些文件需要编译 -->  
            <fileset dir="${srcdir}">  
                <include name="**/*.aidl"/>  
            </fileset>  
        </apply>  
    </target>

	<!-- 将工程中的java源文件编译成class文件 -->  
    <target name="compile" depends="aidl">  
        <echo>Compiling java source code...</echo>  
        <javac debug="true" includeantruntime="false" encoding="utf-8" source="1.6" target="1.6" srcdir="." destdir="${outdir-classes}"
            bootclasspath="${android-jar}">
        </javac>
    </target>
	
	<target name="dex" depends="compile">
        <echo>dex...</echo>
        <exec executable="${dx}" failonerror="true">  
            <arg value="--dex" /> 
            <arg value="--output=${maindex-ospath}" />  
            <arg path="${outdir-classes-ospath}" />
        </exec>
    </target>

	<!-- 将资源文件放进输出目录 -->  
    <target name="package-res-and-assets" depends="dex">  
        <echo>Packaging resources and assets...</echo>  
        <exec executable="${aapt}" failonerror="true">  
            <arg value="package" />  
            <arg value="-f" />  
            <arg value="-M" />  
            <arg value="${manifest-xml}" />  
            <arg value="-S" />  
            <arg value="${resource-dir}" />  
            <arg value="-A" />  
            <arg value="${asset-dir}" />  
            <arg value="-I" />  
            <arg value="${android-jar}" />  
            <arg value="-F" />  
            <arg value="${resources-package}" />
        </exec>  
    </target> 
    
    <macrodef name="add_to_ap">
        <attribute name="apPath" />
        <attribute name="targetSubPath" />
        <attribute name="targetPath" />
        <sequential>
            <echo>开始加入ap...</echo>
            <echo>@{targetPath} @{targetSubPath}</echo>
			<exec executable="${aapt}" failonerror="true" dir="@{targetPath}">
				<arg value="a" />
				<arg value="@{apPath}" />
				<arg value="@{targetSubPath}" />
			</exec>
        </sequential>
    </macrodef>
    
	<!-- 打包成未签名的apk -->  
    <target name="package" depends="package-res-and-assets">  
        <echo>Packaging unsigned apk for release...</echo>  
        <java classpath="${sdk-folder}/tools/lib/sdklib.jar" classname="com.android.sdklib.build.ApkBuilderMain">
            <arg value="${out-unsigned-package-ospath}" /> 
            <arg value="-u" /> 
            <arg value="-z" /> 
            <arg value="${resources-package-ospath}" />
            <arg value="-f" /> 
            <arg value="${maindex-ospath}" /> 
            <arg value="-rf" /> 
            <arg value="${srcdir-ospath}" />
            <arg value="-nf"/>
    		<arg value="${external-lib}" />
        </java> 
        <echo>It will need to be signed with jarsigner before being published.</echo>  
    </target>
    
	<!-- 对apk进行签名 -->  
    <target name="release" depends="package">  
        <echo>Packaging signed apk for release...</echo>  
        <exec executable="${jarsigner}" failonerror="true">
            <arg value="-verbose"/> 
            <arg value="-digestalg" />  
            <arg value="SHA1" />
            <arg value="-sigalg" />  
            <arg value="MD5withRSA" />
            <arg value="-certs"/>
            <arg value="-keystore" />  
            <arg value="${keystore-file}" />  
            <arg value="-storepass" />  
            <arg value="hotpatchkey" />  
            <arg value="-keypass" />  
            <arg value="hotpatchkey" />  
            <arg value="-signedjar" />  
            <arg value="${out-signed-package-ospath}" />  
            <arg value="${out-unsigned-package-ospath}"/>  
            <!-- 不要忘了证书的别名 -->  
            <arg value="hotpatch_cert"/>  
        </exec>  
    </target>
    
    <target name="patch">
        <echo>patch...</echo> 
        <delete dir="${patch-classes-ospath}"/>
		<mkdir dir="${patch-classes-ospath}" /> 
		<delete dir="${patchdex-ospath}"/>
		<mkdir dir="${patchdex-ospath}" />
		
        <delete dir="${outdir-classes-ospath}"/>
		<mkdir dir="${outdir-classes-ospath}" />
        <javac debug="true" includeantruntime="false" encoding="utf-8" source="1.6" target="1.6"
            srcdir="${srcdir-ospath}"
            includes="com/example/patchinlinedemo/BugObject.java"
            destdir="${outdir-classes-ospath}"
            bootclasspath="${android-jar}">
        </javac>
        <copy file="${outdir-classes-ospath}/com/example/patchinlinedemo/BugObject.class" tofile="${patch-classes-ospath}/com/example/patchinlinedemo/BugObject.class" />
        <echo>${dx}...</echo>
        <exec executable="${dx}" failonerror="true">
            <arg value="--dex" /> 
            <arg value="--output=${patchdex-ospath}/${patchdex-file}" />  
            <arg path="${patch-classes-ospath}" />
        </exec> 
        <jar destfile="${patchdex-ospath}/${patchjar-file}" basedir="${patchdex-ospath}" includes="${patchdex-file}" />
        <copy file="${patchdex-ospath}/${patchjar-file}" tofile="${asset-dir}/${patchjar-file}" />
        <delete file="${patchdex-ospath}/${patchdex-file}"/>
        
        <delete dir="${outdir-classes-ospath}"/>
    </target>

    <target name="install">
        <echo>Install APK...</echo>

        <exec executable="adb" failonerror="true">
            <arg value="install" />
            <arg value="-r" />
            <arg value="${out-signed-package-ospath}" />
        </exec>
    </target>

    <target name="uninstall">
        <echo>uninstall APK..</echo>
        <exec executable="adb" failonerror="true">
            <arg value="uninstall" />
            <arg value="com.example.patchinlinedemo" />
        </exec>
    </target>
	
</project>